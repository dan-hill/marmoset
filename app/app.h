#ifndef ROUTES_H
#define ROUTES_H

#include "marmoset.h"
#include "serializer.h"

#include "index/index.h"
/** @defgroup Application
*
* Marmoset is ment to have applications built on top of it while it handles the
* nitty gritty of sockets, HTTP protocol data parsing, and application request
* routing. The Functions and macros in this section pertain to the API used
* when developing an application such as registering a route and accepting requests
* and sending responses.
*
* The example application is also included in this documentation so you can see how
* routes and responders are used.
*/
/** @{ */
/** Routes requests to application functions.
* The route function is the entry point for applications that run on
* top of Marmoset. In this function routes to application functions
* are defined and requests are passed to those functions.
*
* To add a route to an application resource, the developer only needs to add
* a new if statement to capture the request as it flows through the function then
* pass the req struct to their own handler. If the request is not captured and routed
* it is passed to the abort() function and an error will be returned to the client
* that no route matching the request can be found.
*
* If the developer would like a different default functionality for unmatched routes
* they can replace the abort() function with a custom handler.
*
* @param req Pointer to the request struct.
* @returns http_response* Pointer to the response generated by the
* function the request was routed to.
*/
struct http_response* route(struct http_request * req);

/** Application main() function.
*
* The main function in Marmoset only starts the server and has no other function.
* If the developer requires any special setup it should be handled in the app_m file
* for anything related to process spawning or one of the files in the networking module
* for network and socket related operations.
*
* @returns int
*/
int main();
/** @} */
#endif